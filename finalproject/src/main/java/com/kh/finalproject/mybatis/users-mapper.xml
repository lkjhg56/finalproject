<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace : 영역을 부르는 별칭
	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
	resultType : 기대되는 결과물의 형태(목록이든 아니든 dto 형태로 표기)
	
	태그때문에 못쓰게 되는 기호들은 다음의 영역으로 해결이 가능

	<![CDATA[
		SQL 구문
	]]>
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- # 은 형태를 추론하여 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $ 는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		- $ 는 SQL Injection 이라는 해킹공격에 매우 취약하므로 사용에 주의 
 -->

<mapper namespace="users">
	
	<!-- 회원 번호 뽑기 -->
	<select id="getSequence" resultType="int">
		select file_no_seq.nextval from dual
	</select>
	
	<!-- 회원가입 -->
	<insert id="join" parameterType="users">
		insert into 
		users(user_no,name,id,pw,email,grade,phone,postcode,address,detailAddress,extraAddress)
		values(
		#{user_no},#{name},#{id},#{pw},#{email},'일반회원',
		#{phone},#{postcode},#{address},#{detailAddress},#{extraAddress})
	</insert>
	
	<!-- 프로필 사진 -->
	<insert id="join_file" parameterType="userFileDto">
 		insert into user_file values(
 		file_no_seq.nextval,
		#{user_no},
		#{file_upload_name},
		#{file_save_name},
		#{file_type},
		#{file_size}
 		)
 	</insert>

	<!-- 로그인 -->
	<select id="login" parameterType="users" resultType="users">
		select * from users where id=#{id}
	</select>
	
	<!-- 로그인 체크 업데이트 -->
	<update id="login_check" parameterType="users">
		update users set login_check=to_date(sysdate, 'YYYY-MM-dd') where id=#{id}
	</update>
	
	<!-- 오늘 날짜 뽑기 -->
	<select id="today" resultType="String">
		SELECT TO_CHAR(SYSDATE, 'YY/MM/dd') FROM DUAL
	</select>
	
	<!-- 로그인 체크 날짜 뽑기 -->
	<select id="login_day" parameterType="users" resultType="String">
		select to_char(login_check, 'YY/MM/dd') from users where id=#{id}
	</select>
	
	<!-- 아이디 중복 검사 -->
	<select id="id_check" parameterType="String" resultType="int">
		select count(*) from users where id=#{id}
	</select>
	
	<!-- 회원 정보 조회 -->
	<select id="info" parameterType="users" resultType="users">
		select * from users where id=#{id}
	</select>
	
	<!-- 회원 목록 -->
	<select id="user_list" parameterType="map" resultType="users">
		select * from (
	    	select rownum rn, A.* from (
	        	select * from users order by user_no
	    	)A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 회원 목록 개수 -->
	<select id="getUserCount" resultType="int">
		select count(*) from users
	</select>
	
	<!-- 프로필 정보 불러오기 -->
	<select id="getFileOne" parameterType="int" resultType="userFileDto">
		select * from user_file where user_no=#{user_no}
	</select>
	
	<!-- 프로필 삭제 -->
 	<delete id="deleteFile" parameterType="int">
 		delete from user_file where user_no=#{user_no}
 	</delete>
	
	<!-- 회원 탈퇴  -->
	<delete id="bye" parameterType="users">
		delete users where id=#{id}
	</delete>
	
	<!-- 회원 정보 수정 -->
	<update id="change" parameterType="users">
		update users set 
			phone=#{phone},postcode=#{postcode},address=#{address},
			detailAddress=#{detailAddress},extraAddress=#{extraAddress}
		where id=#{id}
	</update>
	
	<!-- 비밀번호 수정 -->
	<update id="change_pw" parameterType="users">
		update users set pw=#{pw} where id=#{id}
	</update>
	
	<!-- 포인트 랭킹 조회 -->
	<select id="grade_point_rank" resultType="users"  parameterType="map">
		select * from (
	    	select rownum rn, A.* from (
	        	select
					rank() over (order by grade_point desc) as rank,name ,grade_point
				from users
	    	)A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 포인트 업데이트 -->
	<!-- 출석 포인트 -->
	<update id="change_1point" parameterType="users">
		update users set grade_point=grade_point+1 where id=#{id}
	</update>
	
	<!-- 3 포인트 -->
	<update id="change_3point" parameterType="int">
		update users set grade_point=grade_point+3 where user_no=#{user_no}
	</update>
	
	<!-- 5 포인트 -->
	<update id="change_5point" parameterType="int">
		update users set grade_point=grade_point+5 where user_no=#{user_no}
	</update>
	<!-- 문제 삭제시 5point 차감 -->
	<update id="decreasePoint" parameterType="int">
	<![CDATA[
		update users set grade_point=
		    case 
		    when grade_point < 5 then 0
		    when grade_point>=5 then grade_point-5 
		    end
		where user_no=#{user_no}
		]]>
	</update>
	<update id="change_join5point" parameterType="int">
		update users set grade_point=grade_point+5 where user_no=${user_no}
	</update>
	
	<!-- users_no 뽑아 오기 -->
	<select id="get_users_no" parameterType="String" resultType="int">
		select user_no from users where id=#{id}
	</select>
	
	<!-- 개수 조회 -->
	<select id="getCount" resultType="int">
		select count(*) from users
	</select>
	
	<!-- 프리미엄 회원 전환 -->
	<!-- point가 얼마인지 확인 -->
	<select id="is" parameterType="users" resultType="int">
		select point from users where id=#{id}
	</select>
	<!-- is_premium -->
	<update id="premium" parameterType="users">
		update users set is_premium=1 where id=#{id}
	</update>
	<!-- point -->
	<update id="point" parameterType="users">
		update users set point=point-500 where id=#{id}
	</update>
		
</mapper>





